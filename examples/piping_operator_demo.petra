-- Petram Example: Pipe Operator and Method Chaining
-- File: example.petra

func #[main :: args: List<String>]#: Void ->
    -- Define a list of numbers
    $numbers := {|1, 2, 3, 4, 5|}  -- Type inferred as List<Int>

    -- Use the |> operator for method chaining
    $result := $numbers
        |> #[.map(f: func #[item: Int]#: Int => item * 2)]#
        |> #[.filter(f: func #[item: Int]#: Bool => item > 5)]#
        |> #[.reduce(f: func #[acc: Int, item: Int]#: Int => acc + item, initial: 0)]#

    -- Print the result
    #[print(message: "Result: {$result}")]#

    -- Example with more complex data
    struct #[Person]# ->
        field name: String
        field age: Int

        new #[name: String, age: Int]#: Self ->
            @name = name
            @age = age

        method #[greet]#: String ->
            "Hello, my name is {@name}!"

    $people: List<Person> = {|
        #[new Person(name: "Alice", age: 30)]#,
        #[new Person(name: "Bob", age: 25)]#,
        #[new Person(name: "Charlie", age: 35)]#
    |}

    -- Use |> with method chaining
    $total_age := $people
        |> #[.map(f: func #[person: Person]#: Int => person.age)]#
        |> #[.reduce(f: func #[acc: Int, age: Int, initial: Int := 0]#: Int => acc + age)]#

    $average_age := #[Float($total_age) / Float(#[$people.length()]#)]#

    #[print(message: "Average age: {$average_age}")]#