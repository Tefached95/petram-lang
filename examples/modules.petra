-- File: geometry/two_dimensional.petra

module Geometry::TwoDimensional

struct Point
    x: Float
    y: Float
end

func Point::new(x: Float, y: Float): Point
    return Point{ x: x, y: y }
end

struct Rectangle
    top_left: Point
    bottom_right: Point
end

func Rectangle::new(top_left: Point, bottom_right: Point): Rectangle
    return Rectangle{ top_left: top_left, bottom_right: bottom_right }
end

func (r: Rectangle) area(): Float
    var width = r.bottom_right.x - r.top_left.x
    var height = r.top_left.y - r.bottom_right.y
    return width * height
end

-- File: geometry/three_dimensional.petra

module Geometry::ThreeDimensional

struct Point3D
    x: Float
    y: Float
    z: Float
end

func Point3D::new(x: Float, y: Float, z: Float): Point3D
    return Point3D{ x: x, y: y, z: z }
end

-- File: main.petra

module Main

import Geometry::TwoDimensional::{Point, Rectangle}
import Geometry::ThreeDimensional::{Point3D}

func main(args: List<String>): Int
    var point = Point::new(x: 0.0, y: 0.0)
    var rect = Rectangle::new(
        top_left: Point::new(x: 0.0, y: 5.0),
        bottom_right: Point::new(x: 10.0, y: 0.0)
    )

    var area = rect.area()
    println(message: "Rectangle area: {area}")

    var point3d = Point3D::new(x: 1.0, y: 2.0, z: 3.0)
    println(message: "3D Point: ({point3d.x}, {point3d.y}, {point3d.z})")

    return 0
end
