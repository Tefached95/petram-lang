-- How traits work in Petram

-- A trait is pretty similar to Rust's traits. It's a definition of methods that a deriving struct must implement.
-- It also allows for constraints on generics.
trait Printable
    func (self: Self) to_string(): String
end

struct Rectangle: Printable
    width: Float
    height: Float
end

func Rectangle::new(width: Float, height: Float): Rectangle
    return Rectangle{ width: width, height: height }
end

func (r: Rectangle) area(): Float
    return r.width * r.height
end

func (r: Rectangle) to_string(): String
    return "Rectangle({r.width} x {r.height})"
end

-- Here we demonstrate how to constrain a generic parameter where it must implement a trait
struct PrintableHolder<T>: Printable
    item: T
end

func PrintableHolder::new<T: Printable>(item: T): PrintableHolder<T>
    return PrintableHolder{ item: item }
end

-- In this method, since we know that T derives from Printable, we can call .to_string() on it.
func (h: PrintableHolder<T>) print_containing_item(): String
    return h.item.to_string()
end

struct DoesNotImplementPrintable
    n: Int
end

func DoesNotImplementPrintable::new(number: Int): DoesNotImplementPrintable
    return DoesNotImplementPrintable{ n: number }
end

func main(args: List<String>): Int
    var rectangles = {
        Rectangle::new(width: 3.0, height: 4.0),
        Rectangle::new(width: 2.5, height: 5.0),
        Rectangle::new(width: 1.0, height: 10.0)
    }

    -- This will not work:
    -- var whoops = PrintableHolder::new(item: DoesNotImplementPrintable::new(number: 3))
    -- ERROR: Cannot instantiate PrintableHolder<T> with `DoesNotImplementPrintable`.
    --        `DoesNotImplementPrintable` does not derive the trait `Printable`.

    -- Use method chaining with a mix of built-in and custom methods
    var large_areas = rectangles
        .map(|rect: Rectangle| rect.area() end)
        .filter(|area: Float| area > 10.0 end)
        .for_each(|area: Float| println(message: "Large rectangle area: {area}") end)

    -- Chaining with the to_string method
    var rectangle_descriptions = rectangles
        .map(|rect: Rectangle| rect.to_string() end)
        .join(separator: ", ")

    println(message: "Rectangles: {rectangle_descriptions}")
    
    return 0
end
