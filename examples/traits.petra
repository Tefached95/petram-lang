-- How traits work in Petram

-- A trait is pretty similar to Rust's traits. It's a definition of methods that a deriving struct must implement.
-- It also allows for constraints on generics.
trait #[Printable]# ->
    method #[to_string]#: String

struct #[Rectangle < Printable]# ->
    field width: Float
    field height: Float

    new #[width: Float, height: Float]#: Self ->
        @width = width
        @height = height

    method #[area]#: Float => @width * @height

    method #[to_string]#: String => "Rectangle({@width} x {@height})"

-- Here we demonstrate how to constrain a generic parameter where it must implement a trait
struct #[PrintableHolder<T>]# where T < Printable ->
    field item: T

    new #[item: T]#: Self ->
        @item = item

    -- In this method, since we know that T derives from Printable, we can call .to_string() on it.
    method #[print_containing_item]# => #[item.to_string()#]

func #[main :: args: List<String>]#: () ->
    $rectangles := {|
        #[Rectangle(width: 3.0, height: 4.0)]#,
        #[Rectangle(width: 2.5, height: 5.0)]#,
        #[Rectangle(width: 1.0, height: 10.0)]#
    |}

    -- Use |> with a mix of built-in and custom methods
    $large_areas := $rectangles
        |> #[.map(f: func #[rect: Rectangle]#: Float => #[rect.area()]#)]#
        |> #[.filter(f: func #[area: Float]#: Bool => area > 10.0)]#
        |> #[.for_each(f: func #[area: Float]#: Void => #[print(message: "Large rectangle area: {area}")]#)]#

    -- Chaining with the to_string method
    $rectangle_descriptions := $rectangles
        |> #[.map(f: func #[rect: Rectangle]#: String => #[rect.to_string()]#)]#
        |> #[.join(separator: ", ")]#

    #[print(message: "Rectangles: {$rectangle_descriptions}")]#
    -- Implicit unit return
    () 