{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ergor",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#brackets"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.erg",
          "match": "(--).*$"
        },
        {
          "name": "comment.block.erg",
          "begin": "\\{-",
          "end": "-\\}"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.erg",
          "match": "(func|method)\\s+(#\\[)([a-zA-Z_][a-zA-Z0-9_]*)\\s*(::)?",
          "captures": {
            "1": {
              "name": "keyword.other.func.erg"
            },
            "2": {
              "name": "punctuation.definition.parameters.begin.erg"
            },
            "3": {
              "name": "entity.name.function.erg"
            },
            "4": {
              "name": "punctuation.separator.parameter.erg"
            }
          }
        },
        {
          "name": "meta.function-call.erg",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(#\\[)",
          "captures": {
            "1": {
              "name": "entity.name.function.erg"
            },
            "2": {
              "name": "punctuation.definition.arguments.begin.erg"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.erg",
          "match": "\\b(Int|Float|String|Bool|List|Void|Self|Option)\\b"
        },
        {
          "name": "storage.type.generic.erg",
          "match": "\\b[A-Z][a-zA-Z0-9]*(<[^>]+>)?\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.erg",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.erg",
          "match": "\\b(if|else|foreach|in|match|return|struct|new|constrain|where)\\b"
        },
        {
          "name": "keyword.other.erg",
          "match": "\\b(field|message)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.erg",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.erg",
          "match": "\\\\."
        },
        {
          "name": "variable.other.interpolated.erg",
          "match": "\\{\\$[a-zA-Z_][a-zA-Z0-9_]*\\}"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.erg",
          "match": "\\b([0-9]+(\\.?[0-9]*)|\\.?[0-9]+)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.erg",
          "match": "(?<=[\\s\\)\\}\\]\\$\\w])(\\/|\\*|\\-|\\+|%)(?=[\\s\\(\\{\\[\\$\\w])"
        },
        {
          "name": "keyword.operator.assignment.erg",
          "match": "(:=|=)"
        },
        {
          "name": "keyword.operator.logical.erg",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.comparison.erg",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.misc.erg",
          "match": "(\\->|\\=>|\\:|\\|\\>)"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.section.brackets.erg",
          "match": "(#\\[|\\]#|\\{\\||\\|\\})"
        }
      ]
    }
  },
  "scopeName": "source.erg"
}